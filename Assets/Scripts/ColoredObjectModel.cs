using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class ColoredObjectModel
{
	[RealtimeProperty(1, true, true)] PlayerColor _primaryColor;
	[RealtimeProperty(2, true, true)] PlayerColor _secondaryColor;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class ColoredObjectModel : RealtimeModel
{
	public PlayerColor primaryColor
	{
		get
		{
			return (PlayerColor) _primaryColorProperty.value;
		}
		set
		{
			if (_primaryColorProperty.value == (uint) value)
				return;
			_primaryColorProperty.value = (uint) value;
			InvalidateReliableLength();
			FirePrimaryColorDidChange(value);
		}
	}

	public PlayerColor secondaryColor
	{
		get
		{
			return (PlayerColor) _secondaryColorProperty.value;
		}
		set
		{
			if (_secondaryColorProperty.value == (uint) value)
				return;
			_secondaryColorProperty.value = (uint) value;
			InvalidateReliableLength();
			FireSecondaryColorDidChange(value);
		}
	}

	public delegate void PropertyChangedHandler<in T>(ColoredObjectModel model, T value);
	public event PropertyChangedHandler<PlayerColor> primaryColorDidChange;
	public event PropertyChangedHandler<PlayerColor> secondaryColorDidChange;

	public enum PropertyID : uint
	{
		PrimaryColor = 1,
		SecondaryColor = 2,
	}

	#region Properties

	private ReliableProperty<uint> _primaryColorProperty;

	private ReliableProperty<uint> _secondaryColorProperty;

	#endregion

	public ColoredObjectModel() : base(null)
	{
		_primaryColorProperty = new ReliableProperty<uint>(1, (uint) _primaryColor);
		_secondaryColorProperty = new ReliableProperty<uint>(2, (uint) _secondaryColor);
	}

	protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent)
	{
		_primaryColorProperty.UnsubscribeCallback();
		_secondaryColorProperty.UnsubscribeCallback();
	}

	private void FirePrimaryColorDidChange(PlayerColor value)
	{
		try {
			primaryColorDidChange?.Invoke(this, value);
		} catch (System.Exception exception) {
			UnityEngine.Debug.LogException(exception);
		}
	}

	private void FireSecondaryColorDidChange(PlayerColor value)
	{
		try {
			secondaryColorDidChange?.Invoke(this, value);
		} catch (System.Exception exception) {
			UnityEngine.Debug.LogException(exception);
		}
	}

	protected override int WriteLength(StreamContext context)
	{
		var length = 0;
		length += _primaryColorProperty.WriteLength(context);
		length += _secondaryColorProperty.WriteLength(context);
		return length;
	}

	protected override void Write(WriteStream stream, StreamContext context)
	{
		var writes = false;
		writes |= _primaryColorProperty.Write(stream, context);
		writes |= _secondaryColorProperty.Write(stream, context);
		if (writes)
			InvalidateContextLength(context);
	}

	protected override void Read(ReadStream stream, StreamContext context)
	{
		var anyPropertiesChanged = false;
		while (stream.ReadNextPropertyID(out uint propertyID)) {
			var changed = false;
			switch (propertyID) {
				case (uint) PropertyID.PrimaryColor: {
						changed = _primaryColorProperty.Read(stream, context);
						if (changed)
							FirePrimaryColorDidChange(primaryColor);
						break;
					}
				case (uint) PropertyID.SecondaryColor: {
						changed = _secondaryColorProperty.Read(stream, context);
						if (changed)
							FireSecondaryColorDidChange(secondaryColor);
						break;
					}
				default: {
						stream.SkipProperty();
						break;
					}
			}
			anyPropertiesChanged |= changed;
		}
		if (anyPropertiesChanged) {
			UpdateBackingFields();
		}
	}

	private void UpdateBackingFields()
	{
		_primaryColor = primaryColor;
		_secondaryColor = secondaryColor;
	}

}
/* ----- End Normal Autogenerated Code ----- */
