using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel(createMetaModel: true)]
public partial class PlayerModel
{
	[RealtimeProperty(3, true, true)] bool _isCar;
	[RealtimeProperty(4, true, true)] bool _isAvatar;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerModel : RealtimeModel
{
	public bool isCar
	{
		get
		{
			return _isCarProperty.value;
		}
		set
		{
			if (_isCarProperty.value == value)
				return;
			_isCarProperty.value = value;
			InvalidateReliableLength();
			FireIsCarDidChange(value);
		}
	}

	public bool isAvatar
	{
		get
		{
			return _isAvatarProperty.value;
		}
		set
		{
			if (_isAvatarProperty.value == value)
				return;
			_isAvatarProperty.value = value;
			InvalidateReliableLength();
			FireIsAvatarDidChange(value);
		}
	}

	public delegate void PropertyChangedHandler<in T>(PlayerModel model, T value);
	public event PropertyChangedHandler<bool> isCarDidChange;
	public event PropertyChangedHandler<bool> isAvatarDidChange;

	public enum PropertyID : uint
	{
		IsCar = 3,
		IsAvatar = 4,
	}

	#region Properties

	private ReliableProperty<bool> _isCarProperty;

	private ReliableProperty<bool> _isAvatarProperty;

	#endregion

	public PlayerModel() : base(new MetaModel())
	{
		_isCarProperty = new ReliableProperty<bool>(3, _isCar);
		_isAvatarProperty = new ReliableProperty<bool>(4, _isAvatar);
	}

	protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent)
	{
		_isCarProperty.UnsubscribeCallback();
		_isAvatarProperty.UnsubscribeCallback();
	}

	private void FireIsCarDidChange(bool value)
	{
		try {
			isCarDidChange?.Invoke(this, value);
		} catch (System.Exception exception) {
			UnityEngine.Debug.LogException(exception);
		}
	}

	private void FireIsAvatarDidChange(bool value)
	{
		try {
			isAvatarDidChange?.Invoke(this, value);
		} catch (System.Exception exception) {
			UnityEngine.Debug.LogException(exception);
		}
	}

	protected override int WriteLength(StreamContext context)
	{
		var length = MetaModelWriteLength(context);
		length += _isCarProperty.WriteLength(context);
		length += _isAvatarProperty.WriteLength(context);
		return length;
	}

	protected override void Write(WriteStream stream, StreamContext context)
	{
		WriteMetaModel(stream, context);

		var writes = false;
		writes |= _isCarProperty.Write(stream, context);
		writes |= _isAvatarProperty.Write(stream, context);
		if (writes)
			InvalidateContextLength(context);
	}

	protected override void Read(ReadStream stream, StreamContext context)
	{
		var anyPropertiesChanged = false;
		while (stream.ReadNextPropertyID(out uint propertyID)) {
			var changed = false;
			switch (propertyID) {
				case MetaModel.ReservedPropertyID: {
						ReadMetaModel(stream, context);
						break;
					}
				case (uint) PropertyID.IsCar: {
						changed = _isCarProperty.Read(stream, context);
						if (changed)
							FireIsCarDidChange(isCar);
						break;
					}
				case (uint) PropertyID.IsAvatar: {
						changed = _isAvatarProperty.Read(stream, context);
						if (changed)
							FireIsAvatarDidChange(isAvatar);
						break;
					}
				default: {
						stream.SkipProperty();
						break;
					}
			}
			anyPropertiesChanged |= changed;
		}
		if (anyPropertiesChanged) {
			UpdateBackingFields();
		}
	}

	private void UpdateBackingFields()
	{
		_isCar = isCar;
		_isAvatar = isAvatar;
	}

}
/* ----- End Normal Autogenerated Code ----- */
